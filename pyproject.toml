[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "wordle-bot"
version = "1.0.0"
description = "An autonomous Wordle bot using information theory and entropy maximization"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "luuphuc6297", email = "your.email@example.com"}
]
maintainers = [
    {name = "luuphuc6297", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["wordle", "game", "solver", "entropy", "information-theory", "puzzle"]
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.24.0",
    "requests>=2.28.0",
    "rich>=13.0.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/luuphuc6297/wordle-bot"
Repository = "https://github.com/luuphuc6297/wordle-bot.git"
Issues = "https://github.com/luuphuc6297/wordle-bot/issues"
Documentation = "https://github.com/luuphuc6297/wordle-bot/blob/main/README.md"

[project.scripts]
wordle-bot = "wordle_bot.main:main"

[tool.hatch.build.targets.wheel]
packages = ["wordle_bot"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["wordle_bot"]

[tool.flake8]
max-line-length = 88
max-complexity = 10
select = ["E", "F", "W", "C90"]
ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=wordle_bot",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
]

[tool.coverage.run]
source = ["wordle_bot"]
omit = ["tests/*", "wordle_bot/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]