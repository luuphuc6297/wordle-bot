[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "wordle-bot"
version = "1.0.0"
description = "An autonomous Wordle bot using information theory and entropy maximization"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "luuphuc6297", email = "your.email@example.com"}
]
maintainers = [
    {name = "luuphuc6297", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["wordle", "game", "solver", "entropy", "information-theory", "puzzle"]
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.24.0",
    "requests>=2.28.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
]
format = [
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/luuphuc6297/wordle-bot"
Repository = "https://github.com/luuphuc6297/wordle-bot.git"
Issues = "https://github.com/luuphuc6297/wordle-bot/issues"
Documentation = "https://github.com/luuphuc6297/wordle-bot/blob/main/README.md"

[project.scripts]
wordle-bot = "wordle_bot.main:main"

[tool.hatch.build.targets.wheel]
packages = ["wordle_bot"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["wordle_bot"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
]

[tool.coverage.run]
source = ["wordle_bot"]
omit = ["tests/*", "wordle_bot/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]